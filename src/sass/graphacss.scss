/* ==========================================================================
   Graphacss data
   ========================================================================== */

// Values for your chart
$values: (AMD RX480: 24, GTX 1070: 32, GTX 1080: 36, AMD RX4801: 56, GTX 10701: 68, GTX 10801: 75, AMD RX4802: 45, GTX 10702: 72, GTX 10802: 74);

// Color scheme for the bars (repeat automatically)
$sunset: ($teal, $orange, $yellow);
$winteriscoming: ($aqua, $silver, $teal);
$rgb: ($red, $green, $blue);
$pumpkin: ($teal, $orange, $olive);
// Color for the bars
$barColors: $winteriscoming;

/* ==========================================================================
   Graphacss parameters
   ========================================================================== */

$graphType: 'vertical-bars'; // TODO [horizontal-bars | disc | points]
$responsive: false; // TODO Responsive chart with flex

// Units used for the elements (char, legend, bars, etc.)
$units: 'px'; // <$units> : [px | cm | mm | % | ch | pc | in | em | rem | pt | ex | vw | vh]
// Units used for the fonts
$unitsFont: 'px';

// Default font families
$defaultFont: 'Helvetica', sans-serif;

// Colors
$graphicBackground: #EEE; // Background of the chart
$barColor: $blue; // Color of the bars
$valueColorDefault: #FFF; // Default text color for the bar's value (used if you do not set contrast dark and light values)
$valueColorDark: $black; // Color used to contrast with light background (YIQ contrast)
$valueColorLight: #FFF; // Color used to contrast with dark background (YIQ contrast)
$labelColor: $black; // Text color for the bar's label

// Chart sizes
$graphicWidth: 800; // Width of the chart
$graphicHeight: 500; // Height of the chart
$barWidth: 50; // Width of the bars
$barMargin: 10; // Margin between the bars

// Legend and values
$valueMin: 0; // Minimum value of the chart
$valueMax: 120; // Maximum value of the chart
$legendGap: 10; // Gap between the values in the legend
$legendPosition: 'left'; // <$legendPosition> : [left | right] - Display the legend on the left or right
$legendFontFamily: $defaultFont;
$legendFontSize: 14;
$legendLineHeight: 16;
$legendColor: $gray;
$backgroundLinesColor: $silver; // Color for the lines in the background
$showBackgroundLines: true; // <$showBackgroundLines> : [bool] - Show the line inside the entire chart

// Group bars
$groupBars: 3; // TODO Group the bars (useful for comparator)
$groupMargin: 50; // Added to the bar margin

// Bar values displayed
$displayValues: true; // <$displayValues> : [bool] - Display values for the bars
$valuePrefix: '';
$valueSuffix: '%';
$valuePosition: 'inside'; // <$valuePosition> : [inside | outside]
$valueFontFamily: $defaultFont;
$valueFontSize: 18;
$valueLineHeight: 20;
$valueMarginBar: 5;
$valueLines: 1;
$valueHeight: $valueLineHeight*$valueLines+$valueMarginBar;

// Bar labels
$displayLabels: true; // <$displayLabels> : [bool]
$labelPosition: 'bottom'; // <$labelPosition> : [top | bottom]
$labelFontFamily: $defaultFont;
$labelFontSize: 12;
$labelLineHeight: 16;
$labelMaxLines: 3;
$labelHeight: $labelLineHeight*$labelMaxLines;

// Animations
$animationType: 'height'; // <$animationType> : [fade | height | width | none]
$animationSpeed: 2s; // <$animationSpeed> : [duration]
$animationSpeedValue: 0; // <$animationSpeedLabel> : [duration] - 0 to disable

/* ==========================================================================
   Graphacss framework
   ========================================================================== */

//@warn type-of(decimal-ceil($valueMax/$legendStep, 0));
$numberStep: decimal-ceil($valueMax/$legendGap, 0);
//@warn("Steps : #{$numberStep}");
$spaceStep: decimal-ceil($graphicHeight/$numberStep, 0);
//@warn("Space between steps : #{$spaceStep}");
$pixelByPoint: decimal-ceil($graphicHeight/$valueMax, 0);
//@warn("Pixels by point : #{$pixelByPoint}");

// TODO Multiple charts generator : @function with parameters(className, values, barcolors)

@if($graphType == 'vertical-bars') {
    .graphacss {
        position: relative;
        display: block;
        background-color: $graphicBackground;
        width: to-length($graphicWidth, $units);
        height: to-length($graphicHeight, $units);

        &__steps {
            &_step {
                position: absolute;
                display: block;
                @if ($legendPosition == 'left') {
                    left: 0;
                } @else {
                    right: 0;
                }
                bottom: 0;

                &:before {
                    font-family: $legendFontFamily;
                    font-size: to-length($legendFontSize, $unitsFont);
                    line-height: to-length($legendLineHeight, $unitsFont);
                    color: $legendColor;
                }

                &:nth-child(1):before {
                    content: "#{$valueMin}";
                }

                @for $i from 2 through $numberStep {
                    &:nth-child(#{$i}) {
                        bottom: to-length(($i - 1)*$spaceStep, $units);
                        @if($showBackgroundLines){
                            width: 100%;
                        }
                        border-bottom: 1px solid $backgroundLinesColor;

                        &:before {
                            content: "#{($i - 1)*$legendGap}";
                        }
                    }
                }
            }
        }

        &__bars {
            &_bar {
                position: absolute;
                display: block;
                bottom: 0;
                width: to-length($barWidth, $units);
                @if (length($barColors) == 0) {
                    background-color: $barColor;
                }

                // Bars
                $nbBar: 1;
                @each $label, $value in $values {
                    &:nth-child(#{$nbBar}) {
                        $nbGroups: 0;
                        @if($groupBars > 1){
                            $nbGroups: ($nbBar - 1 - (($nbBar - 1)%$groupBars))/$groupBars; // Number of existing groups
                        }
                        left: to-length($nbBar*($barWidth+$barMargin)+$nbGroups*$groupMargin, $units);
                        height: to-length($value*$pixelByPoint, $units);
                        @if($animationType == 'height'){
                            animation: growUp $animationSpeed ease-in-out forwards;
                        } @else if($animationType == 'width'){
                            animation: expandLeft $animationSpeed ease-in-out forwards;
                        } @else if($animationType == 'fade'){
                            animation: fadeIn $animationSpeed ease-in-out forwards;
                        }

                        $barColorSwitch: false;
                        @if (length($barColors) > 0) {
                            $listIndex: (1-$nbBar)%length($barColors);
                            $barColorSwitch: nth($barColors, $listIndex+1);
                            background-color: $barColorSwitch;
                        }

                        @if ($displayValues) {
                            // Value
                            &:before {
                                content: "#{$valuePrefix+$value+$valueSuffix}";
                                position: absolute;

                                @if ($valuePosition == 'outside') {
                                    top: to-length(-$valueHeight, $unitsFont);
                                    height: to-length($valueHeight, $unitsFont);
                                    left: to-length(-$barMargin/2, $units);
                                    width: to-length($barWidth+$barMargin, $units);

                                    // Text color
                                    @if ($barColorSwitch) {
                                        // Contrast with chart's background color
                                        @if($valueColorDark and $valueColorLight){
                                            color: yiq-contrast-color($graphicBackground, $valueColorDark, $valueColorLight);
                                        } @else {
                                            color: yiq-contrast-color($graphicBackground);
                                        }
                                    } @else {
                                        color: $valueColorDefault;
                                    }
                                } @else {
                                    height: auto;
                                    top: to-length($valueMarginBar, $units);
                                    width: to-length($barWidth, $units);

                                    // Text color
                                    @if ($barColorSwitch) {
                                        // Contrast with bar's background color
                                        @if($valueColorDark and $valueColorLight){
                                            color: yiq-contrast-color($barColorSwitch, $valueColorDark, $valueColorLight);
                                        } @else {
                                            color: yiq-contrast-color($barColorSwitch);
                                        }
                                    } @else {
                                        color: $valueColorDefault;
                                    }
                                }

                                font-family: $valueFontFamily;
                                font-size: to-length($valueFontSize, $unitsFont);
                                line-height: to-length($valueLineHeight, $unitsFont);
                                word-break: break-all;
                                text-align: center;

                                @if($animationType != 'none' and $animationSpeedValue != 0){
                                    opacity: 0;
                                    animation: fadeIn $animationSpeedValue ease-in-out $animationSpeed forwards;
                                }
                            }
                        }

                        @if ($displayLabels) {
                            // Label
                            &:after {
                                content: "#{$label}";
                                position: absolute;
                                bottom: to-length(-$labelHeight, $unitsFont);
                                height: to-length($labelHeight, $unitsFont);
                                left: to-length(-$barMargin/2, $units);
                                width: to-length($barWidth+$barMargin, $units);

                                color: $labelColor;
                                font-family: $labelFontFamily;
                                font-size: to-length($labelFontSize, $unitsFont);
                                line-height: to-length($labelLineHeight, $unitsFont);
                                text-align: center;
                            }
                        }
                    }
                    $nbBar: $nbBar+1;
                }
            }
        }
    }
} @else if($graphType == 'horizontal-bars') {

}

/* ==========================================================================
   Graphacss animations
   ========================================================================== */

// Fade
@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

// Height
@keyframes growUp {
    from { max-height: 0; }
    to { max-height: to-length($graphicHeight, $units); }
}

// Width
@keyframes expandLeft {
    from { max-width: 0; }
    to { max-width: to-length($graphicWidth, $units); }
}
/* ==========================================================================
   Graphacss data
   ========================================================================== */

// Values for your chart
$values: (AMD RX480: 24, GTX 1070: 32, GTX 1080: 36, AMD RX4801: 56, GTX 10701: 68, GTX 10801: 75, AMD RX4802: 45, GTX 10702: 72, GTX 10802: 74);

// Color scheme for the bars (repeat automatically)
$sunset: ($teal, $orange, $yellow);
$winteriscoming: ($aqua, $silver, $teal);
$rgb: ($red, $green, $blue);
$pumpkin: ($teal, $orange, $olive);
// Color for the bars
$barColors: $rgb;

/* ==========================================================================
   Graphacss parameters
   ========================================================================== */

$graphType: 'vertical-bars'; // TODO [vertical-bars | horizontal-bars | disc | points]
$flexGraphFullsize: true; // <$flexFullsize> : [bool]
//$graphType: 'horizontal-bars';
//$responsive: false; // TODO Responsive chart with flex

// Units used for the elements (char, legend, bars, etc.)
$units: 'px'; // <$units> : [px | cm | mm | % | ch | pc | in | em | rem | pt | ex | vw | vh]
// Units used for the fonts
$unitsFont: 'px';

// Default font families
$defaultFont: 'Helvetica', sans-serif;

// Colors
$graphicBackground: #EEE; // Background of the chart
$barColor: $blue; // Color of the bars
$valueColorDefault: #FFF; // Default text color for the bar's value (used if you do not set contrast dark and light values)
$valueColorDark: $black; // Color used to contrast with light background (YIQ contrast)
$valueColorLight: #FFF; // Color used to contrast with dark background (YIQ contrast)
$labelColorDefault: $black; // Text color for the bar's label
$labelColorDark: $black; // Color used to contrast with light background (YIQ contrast)
$labelColorLight: #FFF; // Color used to contrast with dark background (YIQ contrast)

// Chart sizes
$graphicWidth: 800; // Width of the chart
$graphicHeight: 500; // Height of the chart
$barWidth: 50; // Width of the bars (or height for horizontal graph) if flex not full width
$barMargin: 10; // Margin between the bars

// Legend and values
$valueMin: 0; // Minimum value of the chart
$valueMax: 120; // Maximum value of the chart
$legendGap: 10; // Gap between the values in the legend
$legendPosition: 'left'; // <$legendPosition> : [left | right | top | bottom] - Display the legend on the left or right
$legendFontFamily: $defaultFont;
$legendFontSize: 14;
$legendLineHeight: 16;
$legendColor: $gray;
$backgroundLinesColor: $silver; // Color for the lines in the background
$showBackgroundLines: true; // <$showBackgroundLines> : [bool] - Show the line inside the entire chart

// Group bars
$groupBars: 3; // TODO Group the bars (useful for comparator)
$groupMargin: 30; // Added to the bar margin

// Bar values displayed
$displayValues: true; // <$displayValues> : [bool] - Display values for the bars
$valuePrefix: '';
$valueSuffix: '%';
$valuePosition: 'inside'; // <$valuePosition> : [inside | outside]
$valueFontFamily: $defaultFont;
$valueFontSize: 18;
$valueLineHeight: 20;
$valueMarginBar: 5;
$valueLines: 1;
$valueHeight: $valueLineHeight*$valueLines+$valueMarginBar*2;
$valueWidth: 35+$valueMarginBar*2;

// Bar labels
$displayLabels: true; // <$displayLabels> : [bool]
$labelPosition: 'bottom'; // <$labelPosition> : [top | bottom]
$labelFontFamily: $defaultFont;
$labelFontSize: 12;
$labelLineHeight: 16;
$labelMaxLines: 2;
$labelHeight: $labelLineHeight*$labelMaxLines;

// Animations
$animationType: 'height'; // <$animationType> : [fade | height | width | none]
$animationSpeed: 2s; // <$animationSpeed> : [duration]
$animationSpeedValue: 0; // <$animationSpeedLabel> : [duration] - 0 to disable

/* ==========================================================================
   Graphacss framework
   ========================================================================== */

$numberStep: decimal-ceil($valueMax/$legendGap, 0);

// Default vertical bars
$spaceStep: decimal-ceil($graphicHeight/$numberStep, 0);
$pixelByPoint: decimal-ceil($graphicHeight/$valueMax, 0);
$sizeX: 'width';
$sizeY: 'height';
$orientationX: 'left';
$orientationY: 'bottom';
$orientationXopposite: 'right';
$orientationYopposite: 'top';
$legendAxe: 'bottom';
@if($legendPosition == 'top'){
    $legendAxe: 'top';
}

// Flex variables
$flexOrientation: 'row';
$flexJustify: 'flex-start'; // TODO option for flex-start, space-between, space-around, center
$flexAlign: 'flex-end';
$flexPadding: 40;

@if($graphType == 'horizontal-bars') {
    $spaceStep: decimal-ceil($graphicWidth/$numberStep, 0);
    $pixelByPoint: decimal-ceil($graphicWidth/$valueMax, 0);
    $sizeX: 'height';
    $sizeY: 'width';
    $orientationX: 'top';
    $orientationY: 'left';
    $orientationXopposite: 'bottom';
    $orientationYopposite: 'right';
    $legendAxe: 'left';
    @if($legendPosition == 'right'){
        $legendAxe: 'right';
    }

    // Flex variables
    $flexOrientation: 'column';
    $flexJustify: 'flex-start';
    $flexAlign: 'flex-start';
}

// TODO Multiple charts generator : @function with parameters(className, values, barcolors)

.graphacss {
    position: relative;
    display: block;
    background-color: $graphicBackground;
    width: to-length($graphicWidth, $units);
    height: to-length($graphicHeight, $units);

    &__steps {
        &_step {
            position: absolute;
            display: block;
            #{$legendAxe}: 0;
            #{$orientationY}: 0;

            &:before {
                font-family: $legendFontFamily;
                font-size: to-length($legendFontSize, $unitsFont);
                line-height: to-length($legendLineHeight, $unitsFont);
                color: $legendColor;
            }

            &:nth-child(1):before {
                content: "#{$valueMin}";
            }

            @for $i from 2 through $numberStep {
                &:nth-child(#{$i}) {
                    #{$orientationY}: to-length(($i - 1)*$spaceStep, $units);
                    @if($showBackgroundLines) {
                        #{$sizeX}: 100%;
                    }

                    border-#{$orientationY}: 1px solid $backgroundLinesColor;

                    &:before {
                        content: "#{($i - 1)*$legendGap}";
                    }
                }
            }
        }
    }

    &__bars {
        &_bar {
            position: absolute;
            display: block;
            #{$orientationY}: 0;
            #{$sizeX}: to-length($barWidth, $units);
            @if (length($barColors) == 0) {
                background-color: $barColor;
            }

            // Bars
            $nbBar: 1;
            @each $label, $value in $values {
                &:nth-child(#{$nbBar}) {
                    $nbGroups: 0;
                    @if($groupBars > 1){
                        $nbGroups: ($nbBar - 1 - (($nbBar - 1)%$groupBars))/$groupBars; // Number of existing groups
                    }
                    #{$orientationX}: to-length($nbBar*($barWidth+$barMargin)+$nbGroups*$groupMargin, $units);
                    #{$sizeY}: to-length($value*$pixelByPoint, $units);
                    //@if($animationType == 'height'){
                    //    animation: growUp $animationSpeed ease-in-out forwards;
                    //} @else if($animationType == 'width'){
                    //    animation: expandLeft $animationSpeed ease-in-out forwards;
                    //} @else if($animationType == 'fade'){
                    //    animation: fadeIn $animationSpeed ease-in-out forwards;
                    //}

                    $barColorSwitch: false;
                    @if (length($barColors) > 0) {
                        $listIndex: (1-$nbBar)%length($barColors);
                        $barColorSwitch: nth($barColors, $listIndex+1);
                        background-color: $barColorSwitch;
                    }

                    @if ($displayValues) {
                        // Value
                        &:before {
                            content: "#{$valuePrefix+$value+$valueSuffix}";
                            position: absolute;

                            @if ($valuePosition == 'outside') {
                                height: to-length($valueHeight, $unitsFont);

                                @if($graphType == 'horizontal-bars'){
                                    right: to-length(-$valueWidth, $unitsFont);
                                    top: to-length($barWidth/2 - $valueLineHeight/2, $units);
                                    width: to-length($valueWidth, $units);
                                } @else {
                                    top: to-length(-$valueHeight, $unitsFont);
                                    left: to-length(-$barMargin/2, $units);
                                    width: to-length($barWidth+$barMargin, $units);
                                }

                                // Contrast with chart's background color
                                @if($valueColorDark and $valueColorLight){
                                    color: yiq-contrast-color($graphicBackground, $valueColorDark, $valueColorLight);
                                } @else {
                                    color: yiq-contrast-color($graphicBackground);
                                }
                            } @else {
                                height: auto;

                                @if($graphType == 'horizontal-bars'){
                                    right: to-length($valueMarginBar, $unitsFont);
                                    top: to-length($barWidth/2 - $valueLineHeight/2, $units);
                                    width: to-length($valueWidth, $units);
                                } @else {
                                    top: to-length(-$valueHeight, $unitsFont);
                                    width: to-length($barWidth, $units);
                                }

                                // Text color
                                @if ($barColorSwitch) {
                                    // Contrast with bar's background color
                                    @if($valueColorDark and $valueColorLight){
                                        color: yiq-contrast-color($barColorSwitch, $valueColorDark, $valueColorLight);
                                    } @else {
                                        color: yiq-contrast-color($barColorSwitch);
                                    }
                                } @else {
                                    // Contrast with bar's background color
                                    @if($valueColorDark and $valueColorLight){
                                        color: yiq-contrast-color($barColor, $valueColorDark, $valueColorLight);
                                    } @else {
                                        color: $valueColorDefault;
                                    }
                                }
                            }

                            font-family: $valueFontFamily;
                            font-size: to-length($valueFontSize, $unitsFont);
                            line-height: to-length($valueLineHeight, $unitsFont);
                            text-align: center;

                            @if($animationType != 'none' and $animationSpeedValue != 0){
                                opacity: 0;
                                animation: fadeIn $animationSpeedValue ease-in-out $animationSpeed forwards;
                            }
                        }
                    }

                    @if ($displayLabels) {
                        // Label
                        &:after {
                            content: "#{$label}";
                            position: absolute;

                            height: to-length($labelHeight, $unitsFont);
                            width: to-length($barWidth+$barMargin, $units);

                            @if($graphType == 'horizontal-bars'){
                                left: to-length($valueMarginBar, $unitsFont);
                                top: to-length($barWidth/2 - $labelLineHeight*$labelMaxLines/2, $units);

                                // Text color
                                @if ($barColorSwitch) {
                                    // Contrast with bar's background color
                                    @if($labelColorDark and $labelColorLight){
                                        color: yiq-contrast-color($barColorSwitch, $labelColorDark, $labelColorLight);
                                    } @else {
                                        color: yiq-contrast-color($barColorSwitch);
                                    }
                                } @else {
                                    // Contrast with bar's background color
                                    @if($labelColorDark and $labelColorLight){
                                        color: yiq-contrast-color($barColor, $labelColorDark, $labelColorLight);
                                    } @else {
                                        color: $labelColorDefault;
                                    }
                                }
                            } @else {
                                bottom: to-length(-$labelHeight, $unitsFont);
                                left: to-length(-$barMargin/2, $units);
                                color: $labelColorDefault;
                            }

                            font-family: $labelFontFamily;
                            font-size: to-length($labelFontSize, $unitsFont);
                            line-height: to-length($labelLineHeight, $unitsFont);
                            text-align: center;
                        }
                    }
                }
                $nbBar: $nbBar+1;
            }
        }
    }
}

.graphacss-flex {
    position: relative;
    display: block;
    background-color: $graphicBackground;
    width: to-length($graphicWidth, $units);
    height: to-length($graphicHeight, $units);

    &__steps {
        &_step {
            position: absolute;
            display: block;
            #{$legendAxe}: 0;
            #{$orientationY}: 0;

            &:before {
                font-family: $legendFontFamily;
                font-size: to-length($legendFontSize, $unitsFont);
                line-height: to-length($legendLineHeight, $unitsFont);
                color: $legendColor;
            }

            &:nth-child(1):before {
                content: "#{$valueMin}";
            }

            @for $i from 2 through $numberStep {
                &:nth-child(#{$i}) {
                    #{$orientationY}: to-length(($i - 1)*$spaceStep, $units);
                    @if($showBackgroundLines) {
                        #{$sizeX}: 100%;
                    }

                    border-#{$orientationY}: 1px solid $backgroundLinesColor;

                    &:before {
                        content: "#{($i - 1)*$legendGap}";
                    }
                }
            }
        }
    }

    &__bars {
        display: flex;
        //flex-flow: #{$flexOrientation+' nowrap'};
        flex-direction: #{$flexOrientation};
        flex-wrap: nowrap;
        justify-content: #{$flexJustify};
        align-items: #{$flexAlign};
        width: 100%;
        height: 100%;

        &_bar {
            display: flex;
            position: relative;
            align-items: center;

            margin-#{$orientationXopposite}: to-length($barMargin, $units);
            &:first-of-type {
                margin-#{$orientationX}: to-length($flexPadding, $units);
            }
            &:last-of-type {
                margin-#{$orientationXopposite}: to-length($flexPadding, $units);
            }
            @if($flexGraphFullsize){
                flex-grow: 1;
            }

            #{$sizeX}: to-length($barWidth, $units);
            @if (length($barColors) == 0) {
                background-color: $barColor;
            }

            @if($graphType == 'horizontal-bars'){
                flex-direction: row-reverse;
                @if($valuePosition == 'inside'){
                    justify-content: space-between;
                } @else {
                    justify-content: flex-end;
                }
            } @else {
                flex-direction: column;
            }

            // Bars
            $nbBar: 1;
            @each $label, $value in $values {
                &:nth-child(#{$nbBar}) {
                    @if($nbBar != 1 and ($nbBar - 1)%$groupBars == 0){
                        margin-#{$orientationX}: to-length($groupMargin, $units);
                    }
                    #{$sizeY}: to-length($value*$pixelByPoint, $units);
                    //@if($animationType == 'height'){
                    //    animation: growUp $animationSpeed ease-in-out forwards;
                    //} @else if($animationType == 'width'){
                    //    animation: expandLeft $animationSpeed ease-in-out forwards;
                    //} @else if($animationType == 'fade'){
                    //    animation: fadeIn $animationSpeed ease-in-out forwards;
                    //}

                    $barColorSwitch: false;
                    @if (length($barColors) > 0) {
                        $listIndex: (1-$nbBar)%length($barColors);
                        $barColorSwitch: nth($barColors, $listIndex+1);
                        background-color: $barColorSwitch;
                    }

                    @if ($displayValues) {
                        // Value
                        &:before {
                            //@if($graphType == 'vertical-bars'){
                            //    position: absolute;
                            //}

                            content: "#{$valuePrefix+$value+$valueSuffix}";

                            @if ($valuePosition == 'outside') {
                                position: absolute;

                                @if($graphType == 'horizontal-bars'){
                                    right: to-length(-$barWidth*2, $units);
                                    top: 2px;
                                    text-align: left;
                                } @else {
                                    width: 100%;
                                    top: to-length(-$valueHeight, $unitsFont);
                                    text-align: center;
                                }

                                // Contrast with chart's background color
                                @if($valueColorDark and $valueColorLight){
                                    color: yiq-contrast-color($graphicBackground, $valueColorDark, $valueColorLight);
                                } @else {
                                    color: yiq-contrast-color($graphicBackground);
                                }
                            } @else {
                                margin-#{$orientationYopposite}: to-length($valueMarginBar, $unitsFont);

                                // Text color
                                @if ($barColorSwitch) {
                                    // Contrast with bar's background color
                                    @if($valueColorDark and $valueColorLight){
                                        color: yiq-contrast-color($barColorSwitch, $valueColorDark, $valueColorLight);
                                    } @else {
                                        color: yiq-contrast-color($barColorSwitch);
                                    }
                                } @else {
                                    // Contrast with bar's background color
                                    @if($valueColorDark and $valueColorLight){
                                        color: yiq-contrast-color($barColor, $valueColorDark, $valueColorLight);
                                    } @else {
                                        color: $valueColorDefault;
                                    }
                                }
                                text-align: center;
                                line-height: to-length($valueLineHeight, $unitsFont);
                            }

                            font-family: $valueFontFamily;
                            font-size: to-length($valueFontSize, $unitsFont);

                            @if($animationType != 'none' and $animationSpeedValue != 0){
                                opacity: 0;
                                animation: fadeIn $animationSpeedValue ease-in-out $animationSpeed forwards;
                            }
                        }
                    }

                    @if ($displayLabels) {
                        // Label
                        &:after {
                            content: "#{$label}";

                            @if($graphType == 'horizontal-bars'){
                                margin-left: to-length($valueMarginBar, $unitsFont);

                                // Text color
                                @if ($barColorSwitch) {
                                    // Contrast with bar's background color
                                    @if($labelColorDark and $labelColorLight){
                                        color: yiq-contrast-color($barColorSwitch, $labelColorDark, $labelColorLight);
                                    } @else {
                                        color: yiq-contrast-color($barColorSwitch);
                                    }
                                } @else {
                                    // Contrast with bar's background color
                                    @if($labelColorDark and $labelColorLight){
                                        color: yiq-contrast-color($barColor, $labelColorDark, $labelColorLight);
                                    } @else {
                                        color: $labelColorDefault;
                                    }
                                }
                            } @else {
                                position: absolute;
                                width: 100%;
                                height: to-length($labelHeight, $unitsFont);
                                bottom: to-length(-$labelHeight, $unitsFont);
                                color: $labelColorDefault;
                            }

                            font-family: $labelFontFamily;
                            font-size: to-length($labelFontSize, $unitsFont);
                            line-height: to-length($labelLineHeight, $unitsFont);
                            text-align: center;
                        }
                    }
                }
                $nbBar: $nbBar+1;
            }
        }
    }
}

/* ==========================================================================
   Graphacss animations
   ========================================================================== */

// Fade
@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

// Height
@keyframes growUp {
    from { max-height: 0; }
    to { max-height: to-length($graphicHeight, $units); }
}

// Width
@keyframes expandLeft {
    from { max-width: 0; }
    to { max-width: to-length($graphicWidth, $units); }
}
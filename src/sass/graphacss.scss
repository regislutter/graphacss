/* ==========================================================================
   Graphacss data
   ========================================================================== */

// Values for your chart
//$values: (AMD RX480: 24, GTX 1070: 32, GTX 1080: 36, AMD RX4801: 56, GTX 10701: 68, GTX 10801: 75, AMD RX4802: 45, GTX 10702: 72, GTX 10802: 74);

// Color scheme for the bars (repeat automatically)
$sunset: ($teal, $orange, $yellow);
$winteriscoming: ($aqua, $silver, $teal);
$rgb: ($red, $green, $blue);
$pumpkin: ($teal, $orange, $olive);
// Color for the bars
//$barColors: $sunset;

/* ==========================================================================
   Graphacss parameters
   ========================================================================== */

// Default font families
$defaultFont: 'Helvetica', sans-serif;

/* ==========================================================================
   Default parameters
   ========================================================================== */

// HOW TO OVERRIDE PARAMETERS
// $demoParameters: $defaultParameters; // Duplicate the default parameters
// $demoParameters: map-merge($demo2Parameters, (graph-type: 'horizontal-bars')); // Override the value

$defaultParameters: (
    graph-type: 'horizontal-bars', // <graph-type> : [vertical-bars | horizontal-bars | disc | points]
    flex-graph: true, // <flex-graph> : [bool] - Does the graphic adapt to it's container
    // Units used for the elements (char, legend, bars, etc.)
    units: 'px', // <units> : [px | cm | mm | % | ch | pc | in | em | rem | pt | ex | vw | vh]
    // Units used for the fonts
    units-font: 'px', // <units-font> : [px | cm | mm | % | ch | pc | in | em | rem | pt | ex | vw | vh]
    default-font: $defaultFont,

    graphic-background: #EEE,
    bar-color: $blue,
    value-color-default: #FFF,
    value-color-dark: $black,
    value-color-light: #FFF,
    label-color-default: $black,
    label-color-dark: $black,
    label-color-light: #FFF,

    graphic-width: 1200,
    graphic-height: 800,

    bar-width: 50,
    bar-margin: 10,

    value-min: 0,
    value-max: 120,

    legend-gap: 10,
    legend-position: 'left',
    legend-font-family: $defaultFont,
    legend-font-size: 14,
    legend-line-height: 16,
    legend-color: $gray,

    background-lines-color: $silver,
    show-background-lines: true,

    group-bars: 3,
    group-margin: 30,

    display-values: true,
    value-prefix: '',
    value-suffix: '%',
    value-position: 'outside',
    value-font-family: $defaultFont,
    value-font-size: 18,
    value-line-height: 20,
    value-margin-bar: 5,

    display-labels: true,
    label-position: 'right',
    label-font-family: $defaultFont,
    label-font-size: 12,
    label-line-height: 16,
    label-margin-bar: 5,

    animation-type: 'height',
    animation-speed: 2s,
    animation-speed-value: 0,

    legend-axe: 'bottom',

    flex-orientation: 'row',
    flex-justify: 'flex-start', // TODO option for flex-start, space-between, space-around, center
    flex-align: 'flex-end',
    flex-padding: 20
);



/* ==========================================================================
   Graphacss Framework - Mixin to generate multiple graph CSS
   ========================================================================== */

@mixin graph-generator($className, $parameters, $values, $barcolors){
    // Dynamic variables
    $number-step: decimal-ceil(map-get($parameters, value-max)/map-get($parameters, legend-gap), 0);

    // Default vertical bars
    $space-step: decimal-ceil(map-get($parameters, graphic-height)/$number-step, 0);
    $pixel-by-point: decimal-ceil(map-get($parameters, graphic-height)/map-get($parameters, value-max), 0);

    $legend-axe: map-get($parameters, legend-axe);
    @if(map-get($parameters, legend-position) == 'top'){
        $legend-axe: 'top';
    }

    // Initiatize flex option and orientation
    $size-x: 'width';
    $size-y: 'height';
    $orientation-x: 'left';
    $orientation-y: 'bottom';
    $orientation-x-opposite: 'right';
    $orientation-y-opposite: 'top';
    $legend-axe: map-get($parameters, legend-axe);

    // Flex variables
    $flex-orientation: map-get($parameters, flex-orientation);
    $flex-justify: map-get($parameters, flex-justify);
    $flex-align: map-get($parameters, flex-align);

    // Modify values for horizontal orientation
    @if(map-get($parameters, graph-type) == 'horizontal-bars') {
        $space-step: decimal-ceil(map-get($parameters, graphic-width)/$number-step, 0);
        $pixel-by-point: decimal-ceil(map-get($parameters, graphic-width)/map-get($parameters, value-max), 0);
        $size-x: 'height';
        $size-y: 'width';
        $orientation-x: 'top';
        $orientation-y: 'left';
        $orientation-x-opposite: 'bottom';
        $orientation-y-opposite: 'right';
        $legend-axe: 'left';
        @if(map-get($parameters, legend-position) == 'right'){
            $legend-axe: 'right';
        }

        // Flex variables
        $flex-orientation: 'column';
        $flex-justify: 'flex-start';
        $flex-align: 'flex-start';
    }

    .#{$className} {
        position: relative;
        display: block;
        background-color: map-get($parameters, graphic-background);
        width: to-length(map-get($parameters, graphic-width), map-get($parameters, units));
        height: to-length(map-get($parameters, graphic-height), map-get($parameters, units));
        padding-#{$orientation-x}: to-length(map-get($parameters, flex-padding), map-get($parameters, units));
        padding-#{$orientation-x-opposite}: to-length(map-get($parameters, flex-padding), map-get($parameters, units));

        &__steps {
            &_step {
                position: absolute;
                display: block;
                #{$legend-axe}: 0;
                #{$orientation-x}: 0;
                #{$orientation-y}: 0;

                &:before {
                    font-family: map-get($parameters, legend-font-family);
                    font-size: to-length(map-get($parameters, legend-font-size), map-get($parameters, units-font));
                    line-height: to-length(map-get($parameters, legend-line-height), map-get($parameters, units-font));
                    color: map-get($parameters, legend-color);
                }

                &:nth-child(1):before {
                    content: "#{map-get($parameters, value-min)}";
                }

                @for $i from 2 through $number-step {
                    &:nth-child(#{$i}) {
                        #{$orientation-y}: to-length(($i - 1)*$space-step, map-get($parameters, units));
                        @if(map-get($parameters, show-background-lines)) {
                            #{$size-x}: 100%;
                        }

                        border-#{$orientation-y}: 1px solid map-get($parameters, background-lines-color);

                        &:before {
                            content: "#{($i - 1)*map-get($parameters, legend-gap)}";
                        }
                    }
                }
            }
        }

        &__bars {
            display: flex;

            //flex-flow: #{$flexOrientation+' nowrap'};
            flex-direction: #{$flex-orientation};
            flex-wrap: nowrap;
            justify-content: #{$flex-justify};
            align-items: #{$flex-align};
            width: 100%;
            height: 100%;

            &_bar {
                display: flex;
                position: relative;
                align-items: center;

                margin-#{$orientation-x-opposite}: to-length(map-get($parameters, bar-margin), map-get($parameters, units));
                &:first-of-type {
                    margin-#{$orientation-x}: to-length(map-get($parameters, bar-margin), map-get($parameters, units));
                }
                &:last-of-type {
                    margin-#{$orientation-x-opposite}: to-length(map-get($parameters, bar-margin), map-get($parameters, units));
                }

                @if(map-get($parameters, flex-graph)){
                    flex-grow: 1;
                } @else {
                    flex-shrink: 0;
                }

                #{$size-x}: to-length(map-get($parameters, bar-width), map-get($parameters, units));
                @if (length($barColors) == 0) {
                    background-color: map-get($parameters, bar-color);
                }

                @if(map-get($parameters, graph-type) == 'horizontal-bars'){
                    flex-direction: row-reverse;
                    @if(map-get($parameters, value-position) == 'inside'){
                        justify-content: space-between;
                    } @else {
                        justify-content: flex-end;
                    }
                } @else {
                    flex-direction: column;
                }

                // Bars
                $nbBar: 1;
                @each $label, $value in $values {
                    &:nth-child(#{$nbBar}) {
                        @if($nbBar != 1 and ($nbBar - 1)%map-get($parameters, group-bars) == 0){
                            margin-#{$orientation-x}: to-length(map-get($parameters, group-margin), map-get($parameters, units));
                        }
                        #{$size-y}: to-length($value*$pixel-by-point, map-get($parameters, units));


                        @if(map-get($parameters, animation-type) == 'height' or map-get($parameters, animation-type) == 'width'){
                            @if(map-get($parameters, graph-type) == 'horizontal-bars'){
                                animation: #{$className}-expandLeft map-get($parameters, animation-speed) ease-in-out forwards;
                            } @else {
                                animation: #{$className}-growUp map-get($parameters, animation-speed) ease-in-out forwards;
                            }
                        } @else if(map-get($parameters, animation-type) == 'fade'){
                            animation: #{$className}-fadeIn map-get($parameters, animation-speed) ease-in-out forwards;
                        }

                        $barColorSwitch: false;
                        @if (length($barColors) > 0) {
                            $listIndex: (1-$nbBar)%length($barColors);
                            $barColorSwitch: nth($barColors, $listIndex+1);
                            background-color: $barColorSwitch;
                        }

                        @if (map-get($parameters, display-values)) {
                            // Value
                            &:before {
                                content: "#{map-get($parameters, value-prefix)+$value+map-get($parameters, value-suffix)}";

                                @if (map-get($parameters, value-position) == 'outside') {
                                    position: absolute;

                                    @if(map-get($parameters, graph-type) == 'horizontal-bars'){
                                        top: 50%;
                                        left: 100%;
                                        padding-left: to-length(map-get($parameters, value-margin-bar), map-get($parameters, units));
                                        text-align: left;
                                        line-height: 0;
                                    } @else {
                                        width: 100%;
                                        bottom: 100%;
                                        padding-bottom: to-length(map-get($parameters, value-margin-bar), map-get($parameters, units));
                                        text-align: center;
                                    }

                                    // Contrast with chart's background color
                                    @if(map-get($parameters, value-color-dark) and map-get($parameters, value-color-light)){
                                        color: yiq-contrast-color(map-get($parameters, graphic-background), map-get($parameters, value-color-dark), map-get($parameters, value-color-light));
                                    } @else {
                                        color: yiq-contrast-color(map-get($parameters, graphic-background));
                                    }
                                } @else {
                                    margin-#{$orientation-y-opposite}: to-length(map-get($parameters, value-margin-bar), map-get($parameters, units));

                                    // Text color
                                    @if ($barColorSwitch) {
                                        // Contrast with bar's background color
                                        @if(map-get($parameters, value-color-dark) and map-get($parameters, value-color-light)){
                                            color: yiq-contrast-color($barColorSwitch, map-get($parameters, value-color-dark), map-get($parameters, value-color-light));
                                        } @else {
                                            color: yiq-contrast-color($barColorSwitch);
                                        }
                                    } @else {
                                        // Contrast with bar's background color
                                        @if(map-get($parameters, value-color-dark) and map-get($parameters, value-color-light)){
                                            color: yiq-contrast-color(map-get($parameters, bar-color), map-get($parameters, value-color-dark), map-get($parameters, value-color-light));
                                        } @else {
                                            color: map-get($parameters, value-color-default);
                                        }
                                    }
                                    text-align: center;
                                    line-height: 100%;
                                }

                                font-family: map-get($parameters, value-font-family);
                                font-size: to-length(map-get($parameters, value-font-size), map-get($parameters, units-font));

                                @if(map-get($parameters, animation-type) != 'none' and map-get($parameters, animation-speed-value) != 0){
                                    opacity: 0;
                                    animation: #{$className}-fadeIn map-get($parameters, animation-speed-value) ease-in-out map-get($parameters, animation-speed) forwards;
                                }
                            }
                        }

                        @if (map-get($parameters, display-labels)) {
                            // Label
                            &:after {
                                content: "#{$label}";
                                font-family: map-get($parameters, label-font-family);
                                font-size: to-length(map-get($parameters, label-font-size), map-get($parameters, units-font));
                                line-height: to-length(map-get($parameters, label-line-height), map-get($parameters, units-font));

                                @if(map-get($parameters, graph-type) == 'horizontal-bars'){
                                    position: absolute;
                                    top: 50%;
                                    line-height: 0;

                                    @if(map-get($parameters, label-position) == 'right') {
                                        @if (map-get($parameters, value-position) == 'outside') {
                                            right: to-length(map-get($parameters, label-margin-bar), map-get($parameters, units));
                                        } @else {
                                            left: 100%;
                                            width: 100%;
                                            margin-left: to-length(map-get($parameters, label-margin-bar), map-get($parameters, units));
                                        }
                                    } @else {
                                        margin-left: to-length(map-get($parameters, label-margin-bar), map-get($parameters, units));
                                    }

                                    // Text color
                                    @if ($barColorSwitch) {
                                        // Contrast with bar's background color
                                        @if(map-get($parameters, label-color-dark) and map-get($parameters, label-color-light)){
                                            color: yiq-contrast-color($barColorSwitch, map-get($parameters, label-color-dark), map-get($parameters, label-color-light));
                                        } @else {
                                            color: yiq-contrast-color($barColorSwitch);
                                        }
                                    } @else {
                                        // Contrast with bar's background color
                                        @if(map-get($parameters, label-color-dark) and map-get($parameters, label-color-light)){
                                            color: yiq-contrast-color($barColor, map-get($parameters, label-color-dark), map-get($parameters, label-color-light));
                                        } @else {
                                            color: map-get($parameters, label-color-default);
                                        }
                                    }
                                } @else {
                                    position: absolute;
                                    width: 100%;
                                    text-align: center;

                                    @if(map-get($parameters, label-position) == 'top') {
                                        @if (map-get($parameters, value-position) == 'outside') {
                                            top: #{to-length(map-get($parameters, label-margin-bar), map-get($parameters, units))};
                                        } @else {
                                            bottom: 100%;
                                            margin-bottom: to-length(map-get($parameters, label-margin-bar), map-get($parameters, units));
                                        }
                                    } @else {
                                        top: 100%;
                                    }
                                    margin-top: to-length(map-get($parameters, label-margin-bar), map-get($parameters, units));
                                    color: map-get($parameters, label-color-default);
                                }
                            }
                        }
                    }
                    $nbBar: $nbBar+1;
                }
            }
        }
    }

   /* ==========================================================================
   Graphacss animations
   ========================================================================== */

    // Fade
    @keyframes #{$className}-fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    // Height
    @keyframes #{$className}-growUp {
        from { max-height: 0; }
        to { max-height: to-length(map-get($parameters, graphic-height), map-get($parameters, units)); }
    }

    // Width
    @keyframes #{$className}-expandLeft {
        from { max-width: 0; }
        to { max-width: to-length(map-get($parameters, graphic-width), map-get($parameters, units)); }
    }
}